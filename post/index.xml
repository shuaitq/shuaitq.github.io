<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tom Smith&#39;s</title>
    <link>https://shuaitq.github.io/post/</link>
    <description>Recent content in Posts on Tom Smith&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 09 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shuaitq.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>光栅化渲染器</title>
      <link>https://shuaitq.github.io/post/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93%E5%99%A8/</link>
      <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/%E5%85%89%E6%A0%85%E5%8C%96%E6%B8%B2%E6%9F%93%E5%99%A8/</guid>
      <description>&lt;p&gt;以下谈到的项目在&lt;a href=&#34;https://github.com/shuaitq/Aurora&#34;&gt;GitHub:shuaitq/Aurora&lt;/a&gt;可以找到全部源码&lt;/p&gt;

&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;这个东西其实是在大一寒假自学计算机图形学鼓捣出来的，后面被拿去当大一年度项目水了水，终检的时候老师也没有太多的反映，也不知道老师看懂了没，反正最后就水过了也是挺开心的。不过为什么这个时候才来写了这篇博客呢？当然是来填坑的啦，当时做完就直接丢到GitHub上没管了，各种东西都没搞，有几个用户体验的痛点功能也没有做，反正项目通过了就行了（&lt;del&gt;逃&lt;/del&gt;。正如那句话说得好，挖的坑迟早要填的，于是我就回来填这个坑了233。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>生命游戏</title>
      <link>https://shuaitq.github.io/post/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/</guid>
      <description>&lt;p&gt;以下谈到的项目在&lt;a href=&#34;https://github.com/shuaitq/Game-of-Life&#34;&gt;GitHub:shuaitq/Game-of-Life&lt;/a&gt;可以找到全部源码&lt;/p&gt;

&lt;h1 id=&#34;生命游戏&#34;&gt;生命游戏&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;康威生命游戏（英语：Conway&amp;rsquo;s Game of Life），又称康威生命棋，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。它最初于1970年10月在《科学美国人》杂志上马丁·葛登能的“数学游戏”专栏出现。
——维基百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;维基百科链接&lt;a href=&#34;https://en.wikipedia.org/wiki/Conway&#39;s_Game_of_Life&#34;&gt;Conway&amp;rsquo;s Game of Life&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简而言之就是，在一个二维空间内每一个格子就是一个「细胞」，每个细胞存在着两种状态，生和死，并通过一定的规则进行演算的结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rle文件格式</title>
      <link>https://shuaitq.github.io/post/rle%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/rle%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;之所以会了解到.rle文件，是因为在重构&lt;a href=&#34;https://github.com/shuaitq/Game-of-Life&#34;&gt;Game-of-Life&lt;/a&gt;的时候找到了一个关于生命游戏的Wiki：&lt;a href=&#34;http://conwaylife.com/wiki/Main_Page&#34;&gt;LifeWiki&lt;/a&gt;。在这个Wiki上面查阅了很多资料，发现这个网站关于生命游戏的资料非常全而且准确。然后在查着资料的时候突然注意到了在首页的一个下载图标&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://shuaitq.github.io/image/download_pattern.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;根据我对生命游戏的了解，当时猜测应该是类似保存生命的文件。然后就下载了下来看了看，发现里面有2000+个各式各样的生命游戏里的生命，而且都按照.rle文件格式保存，格式规范。于是我就决定抛弃之前使用手写json文件来输入生命初始状态的方法。毕竟支持了.rle就意味着有着一大堆开箱即用的生命（&lt;del&gt;真香&lt;/del&gt;）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://shuaitq.github.io/post/hello-hugo/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/hello-hugo/</guid>
      <description>&lt;h1 id=&#34;第四次搭建博客&#34;&gt;第四次搭建博客&lt;/h1&gt;

&lt;p&gt;回想一下，之前第三次搭建的博客因为不知道源码在哪一次重装之后丢失，部署的html文件在一次服务器迁移中因为字符集问题导致中文乱码。至今已经有接近三年没有打理过这个博客，一直处在不可访问的状态。这次趁着整理大学三年以来的各种项目为接下来的计划作准备正好打理打理这个博客，重新搭建，让它回到正常运作中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第一次逆向工程</title>
      <link>https://shuaitq.github.io/post/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;起因&#34;&gt;起因&lt;/h1&gt;

&lt;p&gt;由于某些特殊的原因，有了这次逆向工程。恰逢元旦放假，还是放一天半，这对于我们来说还真是多啊。于是就有了这次逆向工程。&lt;/p&gt;

&lt;p&gt;由于原来完全不懂逆向工程，就开始满网络找找教程。看了一圈后思路渐渐就清晰了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Noip模板大集合</title>
      <link>https://shuaitq.github.io/post/noip%E6%A8%A1%E6%9D%BF%E5%A4%A7%E9%9B%86%E5%90%88/</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/noip%E6%A8%A1%E6%9D%BF%E5%A4%A7%E9%9B%86%E5%90%88/</guid>
      <description>&lt;p&gt;会有一些之前已经发过文章的算法，这里只是在最后一次Noip前进行一次模板总结，为最后一次Noip做准备&lt;del&gt;（带去考场，误）&lt;/del&gt;。本人水平有限大家看到特别不爽的地方还是忍忍吧。&lt;/p&gt;

&lt;p&gt;下面马上就开始了：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>树状数组</title>
      <link>https://shuaitq.github.io/post/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;p&gt;BYvoid神犇曾经说过。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;树状数组是一个优美小巧的数据结构&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;它没有像其他数据结构那样复杂，在很多时候可以代替线段树，它仅通过简单的几个函数，不需要任何其他的空间，就成功的把求前序和的时间复杂度降到了$O(\log_2 n)$，当然代价就是插入的时间复杂度也变成了$O(\log_2 n)$，不过为了能够快速的求前序和，这是在所难免的。
在树状数组中，一个元素所代表并不只有自己，比如a[15]，因为15的二进制是00001111，所以这个a[00001111] = a[00001110] + a[00001100] + a[00001000]；
即a[15] = a[14] + a[12] + a[8]；&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Noip初赛结束</title>
      <link>https://shuaitq.github.io/post/noip%E5%88%9D%E8%B5%9B%E7%BB%93%E6%9D%9F/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/noip%E5%88%9D%E8%B5%9B%E7%BB%93%E6%9D%9F/</guid>
      <description>&lt;p&gt;按道理来说这个这个不应该写出来，毕竟初赛那么简单，但是我还是做一下总结，因为我在初赛中还是发现了一些自己依然不了解的知识点。成绩自己预计有66分左右，这让我无限感叹：还是湖南好，不像浙江省90+的初赛线，还让不让人活了。看来湖南除了高考分数线高以外还是有一点优点的。&lt;/p&gt;

&lt;p&gt;选择题不是很难，但是有几个比较坑的地方，比如像是链表储存那道题&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;线性表若采用链表储存结构，要求内存中可用储存单元地址。&lt;/p&gt;

&lt;p&gt;A.必须连续。B.部分地址必须连续。C.一定不连续。D.连续不连续均可。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>https://shuaitq.github.io/post/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>&lt;p&gt;本以为自己会写二分查找，不过就是取中间值和要找的对象进行比较大小，再根据比较的结果，选择左边还是右边。最终找到要找的东西。但是正如Jon Bentley所说&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;90%以上的程序员无法正确无误的写出二分查找代码。 ——Jon Bentley&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Hello Hexo</title>
      <link>https://shuaitq.github.io/post/hello-hexo/</link>
      <pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/hello-hexo/</guid>
      <description>&lt;h1 id=&#34;第三次搭建博客&#34;&gt;第三次搭建博客&lt;/h1&gt;

&lt;p&gt;回想一下,这已经是我第三次搭建博客了。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;最初被Bokjan强力推荐后用了简洁的emlog。当时还是蒟蒻的我用了一段时间，但是用着用着就感觉有一点简陋，因为本人无力修改，在最后强迫症发作没有用了。&lt;/li&gt;
&lt;li&gt;后来仔细振作斟酌后入了自己的第一台在阿里云独立主机并在上面搭建了lnmp环境和WordPress。至今还清晰的记得当时完成是的兴奋。可是国内的大环境是这样的Google字体完全被封，加上WordPress过于臃肿导致网站访问速度十分的慢，网上也没有很好的解决办法，就一直想要换掉，这次正好换掉。&lt;/li&gt;
&lt;li&gt;现在我之后在网上看了一圈后看到了静态博客，特点：静态、访问速度极快、专注文章、自由定制，好像还不错的样子，于是去github搜了一个很有名的Jeklly可是看了一圈也没有搞出来，看到了隔壁的Hexo好像也不错的样子，而且比较好上手于是就用上了。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>