<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oi on Tom Smith&#39;s</title>
    <link>https://shuaitq.github.io/tags/oi/</link>
    <description>Recent content in Oi on Tom Smith&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 02 Feb 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shuaitq.github.io/tags/oi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Noip模板大集合</title>
      <link>https://shuaitq.github.io/post/noip%E6%A8%A1%E6%9D%BF%E5%A4%A7%E9%9B%86%E5%90%88/</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/noip%E6%A8%A1%E6%9D%BF%E5%A4%A7%E9%9B%86%E5%90%88/</guid>
      <description>&lt;p&gt;会有一些之前已经发过文章的算法，这里只是在最后一次Noip前进行一次模板总结，为最后一次Noip做准备&lt;del&gt;（带去考场，误）&lt;/del&gt;。本人水平有限大家看到特别不爽的地方还是忍忍吧。&lt;/p&gt;

&lt;p&gt;下面马上就开始了：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>树状数组</title>
      <link>https://shuaitq.github.io/post/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;p&gt;BYvoid神犇曾经说过。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;树状数组是一个优美小巧的数据结构&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;它没有像其他数据结构那样复杂，在很多时候可以代替线段树，它仅通过简单的几个函数，不需要任何其他的空间，就成功的把求前序和的时间复杂度降到了$O(\log_2 n)$，当然代价就是插入的时间复杂度也变成了$O(\log_2 n)$，不过为了能够快速的求前序和，这是在所难免的。
在树状数组中，一个元素所代表并不只有自己，比如a[15]，因为15的二进制是00001111，所以这个a[00001111] = a[00001110] + a[00001100] + a[00001000]；
即a[15] = a[14] + a[12] + a[8]；&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Noip初赛结束</title>
      <link>https://shuaitq.github.io/post/noip%E5%88%9D%E8%B5%9B%E7%BB%93%E6%9D%9F-/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/noip%E5%88%9D%E8%B5%9B%E7%BB%93%E6%9D%9F-/</guid>
      <description>&lt;p&gt;按道理来说这个这个不应该写出来，毕竟初赛那么简单，但是我还是做一下总结，因为我在初赛中还是发现了一些自己依然不了解的知识点。成绩自己预计有66分左右，这让我无限感叹：还是湖南好，不像浙江省90+的初赛线，还让不让人活了。看来湖南除了高考分数线高以外还是有一点优点的。&lt;/p&gt;

&lt;p&gt;选择题不是很难，但是有几个比较坑的地方，比如像是链表储存那道题&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;线性表若采用链表储存结构，要求内存中可用储存单元地址。&lt;/p&gt;

&lt;p&gt;A.必须连续。B.部分地址必须连续。C.一定不连续。D.连续不连续均可。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>https://shuaitq.github.io/post/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://shuaitq.github.io/post/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>&lt;p&gt;本以为自己会写二分查找，不过就是取中间值和要找的对象进行比较大小，再根据比较的结果，选择左边还是右边。最终找到要找的东西。但是正如Jon Bentley所说&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;90%以上的程序员无法正确无误的写出二分查找代码。 ——Jon Bentley&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>